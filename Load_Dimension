CREATE OR REPLACE PACKAGE PKG_LOAD_DIMENSION IS

  PROCEDURE P_REGISTRA_LOG(P_MESSAGE IN VARCHAR2);

  PROCEDURE PRC_ALL_DIMENSIONS(P_DT_BASE DATE);
  --
  PROCEDURE PRC_DIM_COSTUMER_MERGE(P_DT_BASE DATE);
  --
  PROCEDURE PRC_DIM_TABLE1_MERGE(P_DT_BASE DATE);

  PROCEDURE PRC_DIM_TABLE2_INSERT(P_DT_BASE DATE);
   
END PKG_LOAD_DIMENSION;
/

CREATE OR REPLACE PACKAGE BODY "PKG_LOAD_DIMENSION" IS

  PROCEDURE P_REGISTRA_LOG(P_MESSAGE IN VARCHAR2)
  
   IS
  BEGIN
    --   INSERT INTO LOG_EXECUTION(
  
    COMMIT;
  END;

  PROCEDURE PRC_ALL_DIMENSIONS(P_DT_BASE DATE) AS
  
    --
  
    V_DT_START TIMESTAMP;
    V_DT_FIM    TIMESTAMP;
  
    V_MES           VARCHAR2(2) := NULL;
    V_ANO           VARCHAR2(4) := NULL;
    V_DT_INI        DATE;
    V_DATE_MONTH DATE;
  
  BEGIN
  
    --- EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_FORMAT = ''DD/MM/RRRR'' ';
  
    -- P_REGISTRA_LOG ( '0-START PROCESS' );
    -- FIRST DAY OF MONTH
    SELECT TRUNC(P_DT_BASE, 'MM') INTO V_DT_INI FROM DUAL;
    --
    V_DT_START := SYSTIMESTAMP;
  
    V_MES := TO_CHAR(V_DT_INI, 'MM');
    V_ANO := TO_CHAR(V_DT_INI, 'YYYY');
  
    -- START
    PKG_BI_UTIL.PRC_LOG_LOAD('I',
                                        'PKG_LOAD_DIMENSION',
                                        'PRC_DIM_COSTUMER',
                                        V_MES,
                                        V_ANO,
                                        SYSDATE,
                                        NULL);
    P_REGISTRA_LOG('1-LOAD START');
  
    PKG_LOAD_DIMENSION.PRC_DIM_COSTUMER(P_DT_BASE);
    P_REGISTRA_LOG('2-CARREGA PRC_DIM_COSTUMER');
  
    -- FINAL DA CARGA
    PKG_BI_UTIL.PRC_LOG_LOAD('U',
                                        'PKG_LOAD_DIMENSION',
                                        'PRC_DIM_COSTUMER',
                                        V_MES,
                                        V_ANO,
                                        NULL,
                                        SYSDATE);
    P_REGISTRA_LOG('3-FINAL CARGA');
  
    END IF;
  
  END PRC_ALL_DIMENSIONS;


  PROCEDURE PRC_DIM_COSTUMER(P_DT_BASE DATE) IS
  
    V_DT_START TIMESTAMP;
    V_DT_FIM   TIMESTAMP;
  
    V_MES_INI DATE := P_DT_BASE;
  
  BEGIN
  
    V_DT_START := SYSTIMESTAMP;
  
    DECLARE
      --
      TYPE PL_TAB IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
      M_FIELD PL_TAB;
      --
      M_FIELD_01 PL_TAB;
      M_FIELD_02 PL_TAB;
      M_FIELD_03 PL_TAB;
      M_FIELD_04 PL_TAB;
      M_FIELD_05 PL_TAB;
      M_FIELD_06 PL_TAB;
     
      CURSOR C1 IS
      
        SELECT 
			FIELD1,
			FIELD2,
			FIELD3,
			FIELD4,
			FIELD5,
			FIELD6 FROM TABLE@SERV      ;
      --
    BEGIN
      --
      OPEN C1;
      LOOP
        --
        FETCH C1 BULK COLLECT
          INTO M_FIELD_01,
               M_FIELD_02,
               M_FIELD_03,
               M_FIELD_04,
               M_FIELD_05,
               M_FIELD_06
               
               LIMIT 500;
        --
      
        FORALL I IN M_FIELD_01.FIRST .. M_FIELD_01.LAST
          MERGE INTO DIM_COSTUMER FAT
          USING (SELECT M_FIELD_01(I) FIELD2,
                        M_FIELD_02(I) FIELD3,
                        M_FIELD_03(I) FIELD4,
                        M_FIELD_04(I) FIELD5
                 
                   FROM DUAL) MER
          ON (FAT.FIELD1 = MER.FIELD1)
          WHEN MATCHED THEN
            UPDATE
               SET FAT.FIELD2          = MER.FIELD2,
                   FAT.FIELD3          = MER.FIELD3,
                   FAT.FIELD4          = MER.FIELD4,
                   FAT.FIELD5          = MER.FIELD5,
                   FAT.FIELD6          = MER.FIELD6
            
          
          WHEN NOT MATCHED THEN
            INSERT
              (FAT.FIELD1,
               FAT.FIELD2,
               FAT.FIELD3,
               FAT.FIELD4,
               FAT.FIELD5,
               FAT.FIELD6
                )
            VALUES
              (MER.FIELD1,
               MER.FIELD2,
               MER.FIELD3,
               MER.FIELD4,
               MER.FIELD5,
               MER.FIELD6
               
               );
      
        --
        COMMIT;
        --
        EXIT WHEN C1%NOTFOUND;
        --
      END LOOP;
      --
      CLOSE C1;
      --
       
  END PRC_DIM_COSTUMER;

  PROCEDURE PRC_DIM_TABLE1_MERGE(P_DT_BASE DATE) IS
  
    V_DT_START TIMESTAMP;
    V_DT_FIM   TIMESTAMP;
  
    V_MES_INI DATE := P_DT_BASE;
  
  BEGIN
  
    V_DT_START := SYSTIMESTAMP;
  
    DECLARE
      --
      TYPE PL_TAB IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;
      M_FIELD PL_TAB;
      --
      M_FIELD_01 PL_TAB;
      M_FIELD_02 PL_TAB;
      M_FIELD_03 PL_TAB;
      M_FIELD_04 PL_TAB;
      M_FIELD_05 PL_TAB;
      M_FIELD_06 PL_TAB;
     
      CURSOR C1 IS
      
        SELECT 
			FIELD1,
			FIELD2,
			FIELD3,
			FIELD4,
			FIELD5,
			FIELD6 FROM TABLE      ;
      --
    BEGIN
      --
      OPEN C1;
      LOOP
        --
        FETCH C1 BULK COLLECT
          INTO M_FIELD_01,
               M_FIELD_02,
               M_FIELD_03,
               M_FIELD_04,
               M_FIELD_05,
               M_FIELD_06
               
               LIMIT 500;
        --
      
        FORALL I IN M_FIELD_01.FIRST .. M_FIELD_01.LAST
          MERGE INTO DIM_COSTUMER FAT
          USING (SELECT M_FIELD_01(I) FIELD2,
                        M_FIELD_02(I) FIELD3,
                        M_FIELD_03(I) FIELD4,
                        M_FIELD_04(I) FIELD5
                 
                   FROM DUAL) MER
          ON (FAT.FIELD1 = MER.FIELD1)
          WHEN MATCHED THEN
            UPDATE
               SET FAT.FIELD2          = MER.FIELD2,
                   FAT.FIELD3          = MER.FIELD3,
                   FAT.FIELD4          = MER.FIELD4,
                   FAT.FIELD5          = MER.FIELD5,
                   FAT.FIELD6          = MER.FIELD6
            
          
          WHEN NOT MATCHED THEN
            INSERT
              (FAT.FIELD1,
               FAT.FIELD2,
               FAT.FIELD3,
               FAT.FIELD4,
               FAT.FIELD5,
               FAT.FIELD6
                )
            VALUES
              (MER.FIELD1,
               MER.FIELD2,
               MER.FIELD3,
               MER.FIELD4,
               MER.FIELD5,
               MER.FIELD6
               
               );
      
        --
        COMMIT;
        --
        EXIT WHEN C1%NOTFOUND;
        --
      END LOOP;
      --
      CLOSE C1;
      --
    
  END PRC_DIM_TABLE1_MERGE;
  
  

  PROCEDURE PRC_DIM_TABLE2_INSERT IS
  
    TYPE TVAR IS TABLE OF INU.DIM_TABLE2%ROWTYPE;
    L_DATA TVAR;
  
    CURSOR CUR IS
    
      SELECT *
        FROM TABLE@SERV 
      
      ;
  
    ERRORS PLS_INTEGER;
  
    DML_ERRORS EXCEPTION;
    PRAGMA EXCEPTION_INIT(DML_ERRORS, -24381);
  
  BEGIN
  
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_TABLE2';
  
    OPEN CUR;
    LOOP
    
      FETCH CUR BULK COLLECT
        INTO L_DATA LIMIT 10000;
    
      -- SAVE EXCEPTIONS MEANS DON'T STOP IF SOME DELETES FAIL
      FORALL I IN 1 .. L_DATA.COUNT SAVE EXCEPTIONS
      --
        INSERT INTO DIM_TABLE2 VALUES L_DATA (I);
    
      EXIT WHEN CUR%NOTFOUND;
    END LOOP;
  
    COMMIT;
  
  END PRC_DIM_TABLE2_INSERT;

 END;
/

